// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/": {
            "get": {
                "description": "Get a list of products from the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "LandingPage"
                ],
                "summary": "Landing page",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/admin": {
            "get": {
                "description": "Get admin dashboard info",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Admin Dashboard",
                "responses": {
                    "200": {
                        "description": "Welcome admin page",
                        "schema": {
                            "type": "json"
                        }
                    }
                }
            }
        },
        "/admin/bestselling": {
            "get": {
                "description": "Fetch  the best selling products from database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Best selling products",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Type of search: 'product' or 'category'",
                        "name": "type",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User was deleted",
                        "schema": {
                            "type": "json"
                        }
                    }
                }
            }
        },
        "/admin/categories": {
            "get": {
                "description": "Retrieve a list of categories from the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin/Categories"
                ],
                "summary": "List categories",
                "responses": {
                    "200": {
                        "description": "List of categories",
                        "schema": {
                            "type": "json"
                        }
                    },
                    "400": {
                        "description": "Failed to fetch category list",
                        "schema": {
                            "type": "json"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Add a new category to the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin/Categories"
                ],
                "summary": "Add a new category",
                "parameters": [
                    {
                        "description": "Category data",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controller.CategoryForm"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "New category created successfully",
                        "schema": {
                            "type": "json"
                        }
                    },
                    "406": {
                        "description": "Failed to bind data",
                        "schema": {
                            "type": "json"
                        }
                    },
                    "500": {
                        "description": "Failed to insert category",
                        "schema": {
                            "type": "json"
                        }
                    }
                }
            }
        },
        "/admin/categories/block/{ID}": {
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Block the access of products in this category",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin/Categories"
                ],
                "summary": "Blocking a category",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "The Category ID that will be blocked",
                        "name": "ID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Category deleted successfully",
                        "schema": {
                            "type": "json"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "json"
                        }
                    }
                }
            }
        },
        "/admin/categories/{ID}": {
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Delete  a specific category by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin/Categories"
                ],
                "summary": "Delete a specific category",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "The Category ID you want to delete",
                        "name": "ID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Category deleted successfully",
                        "schema": {
                            "type": "json"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Edit an existing category in the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin/Categories"
                ],
                "summary": "Edit a category",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Category ID",
                        "name": "ID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Category data for editing",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controller.CategoryForm"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully edited category",
                        "schema": {
                            "type": "json"
                        }
                    },
                    "400": {
                        "description": "Invalid request format",
                        "schema": {
                            "type": "json"
                        }
                    },
                    "404": {
                        "description": "Category not found",
                        "schema": {
                            "type": "json"
                        }
                    },
                    "500": {
                        "description": "Failed to edit category",
                        "schema": {
                            "type": "json"
                        }
                    }
                }
            }
        },
        "/admin/coupon": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get details of all coupons",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin/Coupon"
                ],
                "summary": "Get coupon details",
                "operationId": "get_all_products",
                "responses": {
                    "200": {
                        "description": "Products fetched successfully.",
                        "schema": {
                            "type": "json"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "json"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Admin can Create a new coupon with condition and validity",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin/Coupon"
                ],
                "summary": "New coupon create",
                "parameters": [
                    {
                        "description": "Coupon data",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Coupon"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Product created successfully",
                        "schema": {
                            "type": "json"
                        }
                    },
                    "406": {
                        "description": "Failed to bind data",
                        "schema": {
                            "type": "json"
                        }
                    },
                    "500": {
                        "description": "Failed to insert Coupon",
                        "schema": {
                            "type": "json"
                        }
                    }
                }
            }
        },
        "/admin/coupon/{ID}": {
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Delete a coupon by its unique identifier",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin/Coupon"
                ],
                "summary": "Delete a coupon by ID",
                "operationId": "deleteCouponByID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Coupon ID",
                        "name": "ID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Coupon deleted successfully",
                        "schema": {
                            "type": "json"
                        }
                    },
                    "500": {
                        "description": "Failed to delete coupon",
                        "schema": {
                            "type": "json"
                        }
                    }
                }
            }
        },
        "/admin/login": {
            "post": {
                "description": "Authenticate admin credentials and generate JWT token for authentication",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Admin Login",
                "parameters": [
                    {
                        "description": "Credentials for authentication ( username \u0026 password)",
                        "name": "Credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controller.adminDetail"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Successfully logged",
                        "schema": {
                            "type": "json"
                        }
                    },
                    "401": {
                        "description": "Invalid username or password",
                        "schema": {
                            "type": "json"
                        }
                    },
                    "501": {
                        "description": "Error binding data",
                        "schema": {
                            "type": "json"
                        }
                    }
                }
            }
        },
        "/admin/logout": {
            "get": {
                "description": "Admin logout and clear cookie",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Admin Logout",
                "responses": {
                    "200": {
                        "description": "Logout successful",
                        "schema": {
                            "type": "json"
                        }
                    }
                }
            }
        },
        "/admin/offer": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieve a list of all available offers",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin/Offer"
                ],
                "summary": "Get a list of offers",
                "operationId": "getOfferList",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "json"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Add a new offer to the system",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin/Offer"
                ],
                "summary": "Add a new offer",
                "operationId": "addOffer",
                "parameters": [
                    {
                        "description": "Offer details",
                        "name": "offer",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Offer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "New Offer Created",
                        "schema": {
                            "type": "json"
                        }
                    },
                    "400": {
                        "description": "Failed to create offer",
                        "schema": {
                            "type": "json"
                        }
                    }
                }
            }
        },
        "/admin/offer/{ID}": {
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Delete an offer from the system by its unique identifier",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin/Offer"
                ],
                "summary": "Delete an offer by ID",
                "operationId": "deleteOffer",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Offer ID",
                        "name": "ID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Deleted Successfully",
                        "schema": {
                            "type": "json"
                        }
                    },
                    "400": {
                        "description": "Failed to delete offer",
                        "schema": {
                            "type": "json"
                        }
                    }
                }
            }
        },
        "/admin/ordercancel": {
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Allows the admin to cancel an existing order.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin/Orders"
                ],
                "summary": "Cancel an order",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "The ID of the order that you want to cancel",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The order has been successfully canceled",
                        "schema": {
                            "type": "json"
                        }
                    },
                    "400": {
                        "description": "An error occurred while cancel the order.",
                        "schema": {
                            "type": "json"
                        }
                    }
                }
            }
        },
        "/admin/orders": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves a list of order items for admin view.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin/Orders"
                ],
                "summary": "View admin orders",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "type": "json"
                        }
                    },
                    "404": {
                        "description": "An error occurred while processing your request.",
                        "schema": {
                            "type": "json"
                        }
                    }
                }
            }
        },
        "/admin/orderstatus": {
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Allows the admin to update status of an existing order.",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin/Orders"
                ],
                "summary": "Status update of an order",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "The ID of the order that you want to upfate status",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": " New status for the order",
                        "name": "status",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The order status has been changed successfully ",
                        "schema": {
                            "type": "json"
                        }
                    },
                    "400": {
                        "description": "An error occurred while updating status of the order.",
                        "schema": {
                            "type": "json"
                        }
                    }
                }
            }
        },
        "/admin/product": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Adds a new product with images and other details",
                "consumes": [
                    "multipart/form-data"
                ],
                "tags": [
                    "Admin/Products"
                ],
                "summary": "Add a new product with images",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Product name",
                        "name": "name",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Product price",
                        "name": "price",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Product size",
                        "name": "size",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Product color",
                        "name": "color",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Product quantity",
                        "name": "quantity",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Product description",
                        "name": "description",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Category ID of the product",
                        "name": "categoryId",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "file"
                        },
                        "collectionFormat": "csv",
                        "description": "Product images",
                        "name": "images",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "json"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "json"
                        }
                    }
                }
            }
        },
        "/admin/product/{id}": {
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "delete a product by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin/Products"
                ],
                "summary": "delete a product by its ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "product's id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "json"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "json"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Edit  an existing product using its unique identifier",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin/Products"
                ],
                "summary": "edit a product by id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "product Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Product name",
                        "name": "name",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Product price",
                        "name": "price",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Product size",
                        "name": "size",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Product color",
                        "name": "color",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Product quantity",
                        "name": "quantity",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Product description",
                        "name": "description",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Category ID of the product",
                        "name": "categoryId",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "file"
                        },
                        "collectionFormat": "csv",
                        "description": "Product images",
                        "name": "images",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "json"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "json"
                        }
                    }
                }
            }
        },
        "/admin/products": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "get a list of all products from the database",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin/Products"
                ],
                "summary": "List all products",
                "responses": {
                    "200": {
                        "description": "The order status has been changed successfully ",
                        "schema": {
                            "type": "json"
                        }
                    },
                    "400": {
                        "description": "An error occurred while updating status of the order.",
                        "schema": {
                            "type": "json"
                        }
                    }
                }
            }
        },
        "/admin/sales/report": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Generates a sales report including total sales amount, total sales count, and total order cancellations.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin/Sales"
                ],
                "summary": "Generate sales report",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "json"
                        }
                    }
                }
            }
        },
        "/admin/sales/report/excel": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Generates a sales report in Excel format and sends it as a downloadable file.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin/Sales"
                ],
                "summary": "Generate sales report in Excel",
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "type": "json"
                        }
                    },
                    "400": {
                        "description": " Internal Server Error",
                        "schema": {
                            "type": "json"
                        }
                    }
                }
            }
        },
        "/admin/sales/report/pdf": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Generates a sales report in Excel format and sends it as a downloadable file.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin/Sales"
                ],
                "summary": "Generate sales report in Excel",
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "type": "json"
                        }
                    },
                    "400": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "json"
                        }
                    }
                }
            }
        },
        "/admin/signup": {
            "post": {
                "description": "Authenticated admin can create new user account",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Signup"
                ],
                "summary": "Admin SignUp",
                "parameters": [
                    {
                        "description": "Create Admin",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controller.adminDetail"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "New admin created",
                        "schema": {
                            "type": "json"
                        }
                    }
                }
            }
        },
        "/admin/user": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "get list of all registered admins",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin/Users"
                ],
                "summary": "list of users",
                "responses": {
                    "200": {
                        "description": "List of users",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/controller.UpdateUserData"
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to fetch user data",
                        "schema": {
                            "type": "json"
                        }
                    }
                }
            }
        },
        "/admin/user/{id}": {
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Delete an existing user from admin side",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin/Users"
                ],
                "summary": "Delete user",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User deleted successfully",
                        "schema": {
                            "type": "json"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "type": "json"
                        }
                    },
                    "500": {
                        "description": "Failed to delete user",
                        "schema": {
                            "type": "json"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Edit user details based on user ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin/Users"
                ],
                "summary": "Edit user details",
                "parameters": [
                    {
                        "description": "Update user info",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controller.UpdateUserData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User updated successfully",
                        "schema": {
                            "type": "json"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "type": "json"
                        }
                    },
                    "406": {
                        "description": "Failed to bind data",
                        "schema": {
                            "type": "json"
                        }
                    },
                    "500": {
                        "description": "Failed to update details",
                        "schema": {
                            "type": "json"
                        }
                    }
                }
            }
        },
        "/admin/userblock/{id}": {
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Update User Bloking status as Blocked or Unblocked",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin/Users"
                ],
                "summary": "Block user",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User blocked or unblocked successfully",
                        "schema": {
                            "type": "json"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "type": "json"
                        }
                    },
                    "500": {
                        "description": "Server error while trying to change blocking status",
                        "schema": {
                            "type": "json"
                        }
                    }
                }
            }
        },
        "/auth/login": {
            "get": {
                "description": "Initiates the Google login process by redirecting to Google's OAuth authorization endpoint.",
                "produces": [
                    "text/html"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Initiate Google login",
                "responses": {
                    "302": {
                        "description": "Redirects to Google login page",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/cart": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves and displays the items in the user's cart along with total amount and discounts.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Cart"
                ],
                "summary": "View cart items",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "json"
                        }
                    },
                    "400": {
                        "description": "Invalid input request",
                        "schema": {
                            "type": "json"
                        }
                    }
                }
            }
        },
        "/cart/{ID}": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Adds a product to the user's cart if it's not already added.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Cart"
                ],
                "summary": "Add product to cart",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Product ID",
                        "name": "ID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Item  was successfully added.",
                        "schema": {
                            "type": "json"
                        }
                    },
                    "400": {
                        "description": "Invalid input data.",
                        "schema": {
                            "type": "json"
                        }
                    }
                }
            }
        },
        "/cart/{ID}/add": {
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Increases the quantity of a product in the user's cart if it's available and within the quantity limit.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Cart"
                ],
                "summary": "Increase quantity of product in cart",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Product ID",
                        "name": "ID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "one more quantity added",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "201": {
                        "description": "can't add more quantity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "202": {
                        "description": "product out of stock",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "failed to add to one more",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "failed to fetch product stock details/can't find product",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/cart/{ID}/delete": {
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Removes a product from the user's cart.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Cart"
                ],
                "summary": "Remove product from cart",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Product ID",
                        "name": "ID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Item has been deleted.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Failed to delete item.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Can't find this item in your cart.",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/cart/{ID}/remove": {
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Decreases the quantity of a product in the user's cart if it's available.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Cart"
                ],
                "summary": "Decrease quantity of product in cart",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Product ID",
                        "name": "ID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "one more quantity removed",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "202": {
                        "description": "can't remove one more",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "failed to update",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "can't find product",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/checkout": {
            "post": {
                "description": "place an order by given cart items, calculate total price of all products in the shopping cart, generate a unique OrderID,place the order with give payment method",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Order"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Payment Method",
                        "name": "payment",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Address ID",
                        "name": "address",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Coupon Code",
                        "name": "coupon",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "json"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "json"
                        }
                    }
                }
            }
        },
        "/filter": {
            "get": {
                "description": "Searches products based on the provided search query and optional sorting criteria.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Products"
                ],
                "summary": "Search products",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Search query for products",
                        "name": "search",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sorting criteria: a_to_z, z_to_a, price_low_to_high, price_high_to_low, new_arrivals, popularity",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "json"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "json"
                        }
                    }
                }
            }
        },
        "/ordercancel/{id}": {
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Order cancel and update the status , other details",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Order"
                ],
                "summary": "Order cancel",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "orderItems order ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Cancelation reason?",
                        "name": "reason",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "json"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "json"
                        }
                    }
                }
            }
        },
        "/orderdetails/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Using OrderItems id fetch and shown the order details",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Order"
                ],
                "summary": "Order details",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "OrderItems table orderId",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "json"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "json"
                        }
                    }
                }
            }
        },
        "/orders": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Fetch order table details and show the order list",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Order"
                ],
                "summary": "User Orders list",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "json"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "json"
                        }
                    }
                }
            }
        },
        "/product/rating/{id}": {
            "post": {
                "description": "Product rating store",
                "produces": [
                    "multipart/form-data"
                ],
                "tags": [
                    "Products"
                ],
                "summary": "Rating store",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Product ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Rating value",
                        "name": "rating",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "json"
                        }
                    },
                    "400": {
                        "description": "Failed to create rating",
                        "schema": {
                            "type": "json"
                        }
                    }
                }
            }
        },
        "/product/review/{id}": {
            "post": {
                "description": "Product Review store",
                "produces": [
                    "multipart/form-data"
                ],
                "tags": [
                    "Products"
                ],
                "summary": "Review store",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Product id fetch",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Product review",
                        "name": "review",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "json"
                        }
                    },
                    "400": {
                        "description": "Failed to create rating",
                        "schema": {
                            "type": "json"
                        }
                    }
                }
            }
        },
        "/product/{id}": {
            "get": {
                "description": "Get a paginated list of products including product name, description, stock, price, brand name, and image.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Products"
                ],
                "summary": "product details",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Product ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "json"
                        }
                    },
                    "404": {
                        "description": "Product details not found",
                        "schema": {
                            "type": "json"
                        }
                    }
                }
            }
        },
        "/user/address/{id}": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "add multiple addresses for a single user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users/Profile"
                ],
                "summary": "Add address",
                "parameters": [
                    {
                        "description": "New address details",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controller.addressUpdate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "json"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "json"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "This API is used for Delete the existing address of a user by his address id .",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users/Profile"
                ],
                "summary": "Delete address",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Address ID",
                        "name": "Id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "json"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "json"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "This API is used for editing the existing address of a user by his address id .",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users/Profile"
                ],
                "summary": "Edit address",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Address ID",
                        "name": "addressId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Edit address",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controller.addressUpdate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "json"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "json"
                        }
                    }
                }
            }
        },
        "/user/edit": {
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "This API is used for updating the user's information like name , email and phone number .",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users/Profile"
                ],
                "summary": "Update profile",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Address ID",
                        "name": "addressId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "User Details",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controller.userDetailUpdate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "json"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "json"
                        }
                    }
                }
            }
        },
        "/user/forgotpass": {
            "post": {
                "description": "Sends an OTP to the user's email for password recovery if the email exists in the database.",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Send OTP for password recovery",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User's email address",
                        "name": "email",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "json"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "json"
                        }
                    }
                }
            }
        },
        "/user/forgotpass/otp": {
            "post": {
                "description": "Checks if the provided OTP is valid and not expired for password recovery.",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Check OTP validity",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User's OTP",
                        "name": "otp",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "json"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "json"
                        }
                    }
                }
            }
        },
        "/user/login": {
            "post": {
                "description": "Authenticate a user by verifying their username and password.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "User Login",
                "parameters": [
                    {
                        "description": "User credentials (Username and Password)",
                        "name": "Credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controller.userDetailLogin"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Login successful",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user/logout": {
            "get": {
                "description": "Authenticated user logout , and remove cookie and jwt from the client side.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "User Logout",
                "responses": {
                    "200": {
                        "description": "Login successful",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user/new-password": {
            "patch": {
                "description": "Sets a new password for the user after verifying the OTP.",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Set new password",
                "parameters": [
                    {
                        "type": "string",
                        "description": "New password",
                        "name": "password",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "type": "json"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "json"
                        }
                    }
                }
            }
        },
        "/user/profile": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get details of the authenticated user including first name, last name, username, email, phone number, and wallet balance.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User/Profile"
                ],
                "summary": "Get User Details",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "json"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "json"
                        }
                    }
                }
            }
        },
        "/user/signup": {
            "post": {
                "description": "SignUp new user with unique email and all other details.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Signup"
                ],
                "summary": "User SignUp",
                "parameters": [
                    {
                        "description": "User SignUp credentials",
                        "name": "Credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controller.userDetailSignUp"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "json"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "json"
                        }
                    }
                }
            }
        },
        "/user/signup/otp": {
            "post": {
                "description": "otp verification after given user details",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Signup"
                ],
                "summary": "User SignUp otp verify",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Verification otp",
                        "name": "otp",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "json"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "json"
                        }
                    }
                }
            }
        },
        "/user/signup/resend": {
            "post": {
                "description": "Resend otp send for signup",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Signup"
                ],
                "summary": "User SignUp resend otp send",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "json"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "json"
                        }
                    }
                }
            }
        },
        "/wishlist": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Added wishlist product list shown",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Wishlist"
                ],
                "summary": "Wishlist show",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "json"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "json"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Add product that likes to wishlist",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Wishlist"
                ],
                "summary": "Wishlist add product",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "product id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "json"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "json"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "remove product that from the wishlist",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Wishlist"
                ],
                "summary": "Wishlist remove product",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "product id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "json"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "json"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "controller.CategoryForm": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "controller.UpdateUserData": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "gender": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "controller.addressUpdate": {
            "type": "object",
            "properties": {
                "user_address": {
                    "type": "string"
                },
                "user_city": {
                    "type": "string"
                },
                "user_country": {
                    "type": "string"
                },
                "user_phone": {
                    "type": "integer"
                },
                "user_pincode": {
                    "type": "integer"
                },
                "user_state": {
                    "type": "string"
                }
            }
        },
        "controller.adminDetail": {
            "type": "object",
            "properties": {
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "controller.userDetailLogin": {
            "type": "object",
            "properties": {
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "controller.userDetailSignUp": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "phone": {
                    "type": "integer"
                }
            }
        },
        "controller.userDetailUpdate": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "gender": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "phone": {
                    "type": "integer"
                }
            }
        },
        "models.Coupon": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string"
                },
                "condition": {
                    "type": "integer"
                },
                "discount": {
                    "type": "number"
                },
                "id": {
                    "type": "integer"
                },
                "valid_from": {
                    "type": "string"
                },
                "valid_to": {
                    "type": "string"
                }
            }
        },
        "models.Offer": {
            "type": "object",
            "properties": {
                "discount": {
                    "type": "number"
                },
                "id": {
                    "type": "integer"
                },
                "offer": {
                    "type": "string"
                },
                "productid": {
                    "type": "integer"
                },
                "valid_from": {
                    "type": "string"
                },
                "valid_to": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "hilofy",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "E Commerce API",
	Description:      "Ecommerce API in go using Gin frame work",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
